# 存在チェック用関数の定義
function exists { which $1 &> /dev/null }

# PATH
if [ -d ~/devel/bin ]; then
    export PATH=~/devel/bin:$PATH
fi
if [ -d ~/devel/maven ]; then
    export MAVEN_HOME=~/devel/maven
    export PATH=$MAVEN_HOME/bin:$PATH
fi
if [ -d /usr/java/jdk ]; then
    export JAVA_HOME=/usr/java/jdk
    export PATH=$JAVA_HOME/bin:$PATH
fi
if [ -d ~/devel/gradle ]; then
    export GRADLE_HOME=~/devel/gradle
    export PATH=$GRADLE_HOME/bin:$PATH
fi
if [ -d ~/devel/groovy ]; then
    export GROOVY_HOME=~/devel/groovy
    export PATH=$GROOVY_HOME/bin:$PATH
fi
if [ -d ~/devel/tomcat ]; then
    export TOMCAT_HOME=~/devel/tomcat
    export PATH=$TOMCAT_HOME/bin:$PATH
fi
if [ -d ~/devel/ant ]; then
    export ANT_HOME=~/devel/ant
    export PATH=$ANT_HOME/bin:$PATH
fi
if [ -d ~/github/git-tasukete ]; then
    export PATH=~/github/git-tasukete:$PATH
fi
if [ -d ~/.nvm ]; then
    . ~/.nvm/nvm.sh
fi
if [ -d ~/android-sdk-linux/tools ]; then
    export PATH=~/android-sdk-linux/tools:$PATH
fi
if [ -d ~/devel/play ]; then
    export PATH=~/devel/play:$PATH
fi

# autojump
# https://github.com/joelthelion/autojump
[[ -s /etc/profile.d/autojump.sh ]] && . /etc/profile.d/autojump.sh

# Python Initialize script
export PYTHONSTARTUP=~/.pyrc

# pip cache
export PIP_DOWNLOAD_CACHE=~/.pip_cache

# virtualenvwrapper
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    . /usr/local/bin/virtualenvwrapper.sh
    export VIRTUALENV_USE_DISTRIBUTE=1
fi

# pythonbrew
if [ -f ~/.pythonbrew/etc/bashrc ]; then
    . ~/.pythonbrew/etc/bashrc
fi

# EDITOR
export EDITOR=/usr/bin/gvim

# less options
export LESS=-rgMj10

# texlive
if [ -d /usr/local/texlive ]; then
    export PATH=$PATH:/usr/local/texlive/2012/bin/x86_64-linux
fi

# aliases
if exists nautilus; then
    alias exp=nautilus
fi
if exists colordiff; then
    alias diff=colordiff
fi
if exists lv; then
    alias lv='lv -c'
fi
if exists gvim; then
    alias vim='vim -gp'
fi

# git-flow の補完
if [ -f ~/.git-flow-completion.zsh ]; then
    source ~/.git-flow-completion.zsh
fi

# Git だろうと Mercurial だろうと、ブランチ名をzshのプロンプトにスマートに表示する方法 - ess sup
# http://d.hatena.ne.jp/mollifier/20090814/p1
autoload -Uz vcs_info
zstyle ':vcs_info:*' formats '(%s)-[%b]'
zstyle ':vcs_info:*' actionformats '(%s)-[%b|%a]'

RPROMPT="%1(v|%F{green}%1v%f|)"

# ls の表示色設定
eval `dircolors ~/.colorrc`
alias ls='ls -F --color=auto'

# zshでsshのホスト名をknown_hostsから補完する - C0mputerClub - Trashbox
# http://trashbox.g.hatena.ne.jp/lurker/20071109/1194586015
function print_known_hosts (){
    if [ -f $HOME/.ssh/known_hosts ]; then
        cat $HOME/.ssh/known_hosts | tr ',' ' ' | cut -d' ' -f1
    fi
}
_cache_hosts=($( print_known_hosts ))


# zsh history search
# https://github.com/mooz/percol
if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac=tac || { tac="tail -r" }}
        BUFFER=$(history -n 1 | eval $tac | percol --query "$LBUFFER" --match-method migemo)
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history
fi

# zsh directory-stack search
if exists percol; then
    function percol_select_dirstack_entry() {
        BUFFER=$(dirs -pl | percol --query "$LBUFFER" --match-method migemo)
        CURSOR=$#BUFFER
        zle -R -c
    }
    zle -N percol_select_dirstack_entry
    bindkey '^K' percol_select_dirstack_entry
fi

setopt pushd_minus
setopt pushd_ignore_dups

# pushdを端末間で共有したり、ログアウトしても残るようにする
# http://sanrinsha.lolipop.jp/blog/2012/02/%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%82%92%E7%AB%AF%E6%9C%AB%E9%96%93%E3%81%A7%E5%85%B1%E6%9C%89%E3%81%97%E3%81%9F%E3%82%8A%E3%80%81%E4%BF%9D.html
function share_pushd_preexec {
    pwd >> ~/.pushd_history
}
function share_pushd_precmd {
    # 現在のディレクトリに戻ってこれるように書き込み
    pwd >> ~/.pushd_history
    # 上の書き込みで重複が生じた場合かもしれないので重複を削除
    cat ~/.pushd_history | uniq >> ~/.pushd_history
    while read line
    do
        # ディレクトリが削除されていることもあるので調べる
        [ -d $line ] && cd $line
    done <~/.pushd_history
    # 削除されたディレクトリが取り除かれた新しいdirsを書き込む
    # 最新のを10だけ保存することにする
    dirs | tr " " "\n" | sed "s|~|${HOME}|" | tac | tail -n 20 > ~/.pushd_history
}

function preexec {
    share_pushd_preexec
}

function precmd {
    # share pushd
    share_pushd_precmd
    # show vcs information
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

sudo() {
    local args
    case $1 in
        vi|vim|gvim)
            args=()
            for arg in $@[2,-1]; do
                if [ $arg[1] = '-' ]; then
                    args[$(( 1+$#args ))]=$arg
                else
                    args[$(( 1+$#args ))]="sudo:$arg"
                fi
            done
            command vim $args
            ;;
        *)
            command sudo $@
            ;;
    esac
}
